{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-2.0001999999987845"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "p2_delta = 0.0001\n",
    "x1 = 1\n",
    "x2 = x1 + p2_delta\n",
    "\n",
    "y1 = f(x1)\n",
    "y2 = f(x2)\n",
    "\n",
    "\"Rise over run!\"\n",
    "approximate_derivative = (y2 - y1) / (x2 - x1)\n",
    "y2 - approximate_derivative * x2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def f(x):\n",
    "    return 2*x**2\n",
    "\n",
    "x = np.arange(0, 5, 0.001)\n",
    "y = f(x)\n",
    "\n",
    "plt.plot(x, y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 8) (2.0001, 8.000800020000002)\n",
      "8.000199999998785\n",
      "-8.00039999999757\n",
      "Approximate derivative for f(x) where x = 2 is 8.000199999998785\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# import matplotlib.pyplot as plt\n",
    "# import numpy as np\n",
    "\n",
    "def f(x):\n",
    "    return 2*x**2\n",
    "\n",
    "# np.arange(start, stop, step) to give us smoother line\n",
    "x = np.arange(0, 5, 0.001)\n",
    "y = f(x)\n",
    "plt.plot(x, y)\n",
    "\n",
    "# The point and the \"close enough\" point\n",
    "p2_delta = 0.0001\n",
    "x1 = 2\n",
    "x2 = x1 + p2_delta\n",
    "y1 = f(x1)\n",
    "y2 = f(x2)\n",
    "print((x1, y1), (x2, y2))\n",
    "\n",
    "# Derivative approximation and y-intercept for the tangent line\n",
    "approximate_derivative = (y2 - y1) / (x2 - x1)\n",
    "print(approximate_derivative)\n",
    "b = y2 - approximate_derivative*x2\n",
    "print(b)\n",
    "\n",
    "# We put the tangent line calculation into a function so we can call\n",
    "# it multiple times for different values of x\n",
    "# approximate_derivative and b are constant for given function\n",
    "# thus calculated once above this function\n",
    "\n",
    "def tangent_line(x):\n",
    "    return approximate_derivative*x + b\n",
    "\n",
    "\n",
    "# plotting the tangent line\n",
    "# +/- 0.9 to draw the tangent line on our graph\n",
    "# then we calculate the y for given x using the tangent line function\n",
    "# Matplotlib will draw a line for us through these points\n",
    "to_plot = [x1-1.9, x1, x1+1.9]\n",
    "plt.plot(to_plot, [tangent_line(i) for i in to_plot])\n",
    "print('Approximate derivative for f(x)',\n",
    "f'where x = {x1} is {approximate_derivative}')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(0, 0) (0.0001, 2e-08)\n",
      "b = 0.0\n",
      "Approximate derivative for f(x) where x = 0 is 0.00019999999999999998\n",
      "(1, 2) (1.0001, 2.00040002)\n",
      "b = -2.0001999999987845\n",
      "Approximate derivative for f(x) where x = 1 is 4.0001999999987845\n",
      "(2, 8) (2.0001, 8.000800020000002)\n",
      "b = -8.00039999999757\n",
      "Approximate derivative for f(x) where x = 2 is 8.000199999998785\n",
      "(3, 18) (3.0001, 18.001200020000002)\n",
      "b = -18.000599999996357\n",
      "Approximate derivative for f(x) where x = 3 is 12.000199999998785\n",
      "(4, 32) (4.0001, 32.00160002)\n",
      "b = -32.00080000006619\n",
      "Approximate derivative for f(x) where x = 4 is 16.000200000016548\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def f(x):\n",
    "    return 2*x**2\n",
    "\n",
    "x = np.array(np.arange(0, 5, 0.001))\n",
    "y = f(x)\n",
    "\n",
    "plt.plot(x, y)\n",
    "\n",
    "colors = ['k', 'g', 'r', 'b', 'c']\n",
    "\n",
    "def approximate_tangent_line(x, approximate_derivative):\n",
    "    return (approximate_derivative * x) + b\n",
    "\n",
    "\n",
    "for i in range(5):\n",
    "    p2_delta = 0.0001\n",
    "    x1 = i\n",
    "    x2 = x1 + p2_delta\n",
    "\n",
    "    y1 = f(x1)\n",
    "    y2 = f(x2)\n",
    "\n",
    "    print((x1, y1), (x2, y2))\n",
    "    \n",
    "    \"Rise over run!\"\n",
    "    approximate_derivative = (y2 - y1) / (x2 - x1)\n",
    "    b = y2 - (approximate_derivative * x2)\n",
    "    print('b = ' + str(b))\n",
    "\n",
    "    plt.scatter(x1, y1, c=colors[i])\n",
    "    to_plot = [x1 - 0.9, x1, x1 + 0.9]\n",
    "    plt.plot([point for point in to_plot], [approximate_tangent_line(point, approximate_derivative) for point in to_plot], c=colors[i])\n",
    "\n",
    "    print('Approximate derivative for f(x)', f'where x = {x1} is {approximate_derivative}')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
